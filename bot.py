from dataclasses import InitVar
from email import message
from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor
import os
import json
import logging
from config import TOKEN
from model import summery_gen
from recog_text import img_loader 
from Parsing_lenta import lenta_parse
from Parsing_habr import parser
from LaBSE_ner import ner_recognition
from money import money_result
from recog_text import check_detect

import markup as nav
# import keybord lib
from aiogram.types import InlineKeyboardMarkup
from aiogram.types import InlineKeyboardButton
#for delayed posting
from apscheduler.schedulers.asyncio import AsyncIOScheduler 
import asyncio
import aioschedule

import time

from gtts import gTTS
import wikipedia, re

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
import aioredis
from aiogram.contrib.fsm_storage.memory import MemoryStorage

json_file_path = 'users.json'
users_dict = []

json_money_path = 'users_money.json'
dict_money = []

storage = MemoryStorage()

scheduler = AsyncIOScheduler()

logging.basicConfig(level=logging.INFO)

class Condi(StatesGroup):
    Init = State()
    NewsChs = State()
    Habr_Model_pars = State()
    Lenta_Model_pars = State()
    Wiki_pars = State()
    Model = State()
    Additional = State()
    Photo_det = State()
    Photo_dig = State()

    Check_News_pars = State()
    NER = State()

    Money = State()
    Money_count_people = State()
    Money_name_people = State()
    Money_name_count = State()
    Money_result = State()
    Chekinput = State()
    ManulChek = State()



bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=storage)

wikipedia.set_lang("ru")

@dp.message_handler(commands=['start'], state = '*')
async def process_start_command(message: types.Message, state: FSMContext):
    await Condi.Init.set()
    await message.reply("–ü—Ä–∏–≤–µ—Ç!\n–Ø —Ç–≤–æ–π –ë–û–¢, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —ç–∫–æ–Ω–æ–º–∏—Ç—å —Ç–≤–æ–µ –≤—Ä–µ–º—è –∏ –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏—Ö —Ç–µ–±—è —Å–æ–±—ã—Ç–∏–π!", reply_markup=nav.mainMenu)


@dp.message_handler(state = Condi.Init)
async def echo_message(msg: types.Message, state: FSMContext):
    if msg.text == 'üìö–î–æ–ø. —Ñ—É–Ω–∫—Ü–∏–∏üìö':
        await Condi.Additional.set()
        await msg.answer('üìö–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—éüìö', reply_markup = nav.featchMenu)
    
    elif msg.text == 'üìã–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏üìã':
        await msg.answer('–ú–æ–∂–µ–º –Ω–∞–π—Ç–∏ —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –í–∞—à–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–∞–ø—Ä–æ—Å–∞–º. –ò—Å–∫–∞—Ç—å?', reply_markup = nav.NewSendMenu)
        await Condi.Check_News_pars.set()
        # await bot.send_message(msg.from_user.id, '–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤–∞—à–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–∞–ø—Ä–æ—Å–∞–º', reply_markup = nav.backMain)

    elif msg.text == 'üìã–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –Ω–æ–≤–æ—Å—Ç–∏üìã':
        await msg.answer('üìã–í—ã–±—Ä–∞—Ç—å —Å–∞–π—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–∏üìã', reply_markup = nav.news2Menu)
        await Condi.NewsChs.set()

        
@dp.message_handler(state = Condi.Additional)
async def echo_message(msg: types.Message, state: FSMContext):
    if msg.text == 'Summary —Å–≤–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–∞':
        await Condi.Model.set()
        await bot.send_message(msg.from_user.id, '‚úèÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç:', reply_markup = nav.backMain)
    elif msg.text == 'Summary –ø–æ —Ñ–æ—Ç–æ —Ç–µ–∫—Å—Ç–∞':
        await bot.send_message(msg.from_user.id, '‚úèÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º:', reply_markup = nav.backMain)
        await Condi.Photo_det.set()
    elif msg.text == ('–û—Ü–∏—Ñ—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç'):
        await bot.send_message(msg.from_user.id, '‚úèÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º:', reply_markup = nav.backMain)
        await Condi.Photo_dig.set()
    elif msg.text == ('–í—ã–¥–µ–ª–∏—Ç—å —Å—É—â–Ω–æ—Å—Ç–∏ (NER)'):
        await bot.send_message(msg.from_user.id, '‚úèÔ∏è–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç:', reply_markup = nav.backMain)
        await Condi.NER.set()
    elif msg.text == ('–ö—Ç–æ –∫–æ–º—É –¥–æ–ª–∂–µ–Ω –¥–µ–Ω–µ–≥?'):
        await bot.send_message(msg.from_user.id, '–°–∫–æ–ª—å–∫–æ –ª—é–¥–µ–π –±—ã–ª–æ –Ω–∞ –≤–µ—á–µ—Ä–∏–Ω–∫–µ?', reply_markup = nav.backMain)
        await Condi.Money.set()
    elif msg.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(msg.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)


@dp.message_handler(state = Condi.Photo_det, content_types=['document', 'photo','text'])
async def get_photo(message: types.Message):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)
    else:
        user_id = message.from_user.id
        img_path = 'input.jpg'
        await message.photo[-1].download(img_path)
        photo_text = img_loader(img_path)
        sum_user = summery_gen(photo_text)
        await bot.send_message(user_id, sum_user, reply_markup = nav.backMain)


@dp.message_handler(state = Condi.Photo_dig, content_types=['document', 'photo','text'])
async def get_photo(message: types.Message):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)
    else:
        user_id = message.from_user.id
        img_path = 'input.jpg'
        await message.photo[-1].download(img_path)
        photo_text = img_loader(img_path)
        await bot.send_message(user_id, photo_text, reply_markup = nav.backMain)


@dp.message_handler(state = Condi.Model)
async def echo_message(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id

    if msg.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(msg.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)        
    else:
        user_text = msg.text
       
        sum_user = summery_gen(user_text)

        await Condi.Init.set()
        await bot.send_message(msg.from_user.id, sum_user, parse_mode=types.ParseMode.HTML,  reply_markup = nav.mainMenu)

@dp.message_handler(state = Condi.NER)
async def echo_message(msg: types.Message, state: FSMContext):
    user_id = msg.from_user.id

    if msg.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(msg.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)        
    else:
        user_text = msg.text
       
        sum_user = ner_recognition(user_text) #summery_gen(user_text)

        await Condi.Init.set()
        await bot.send_message(msg.from_user.id, sum_user, parse_mode=types.ParseMode.HTML,  reply_markup = nav.mainMenu)

@dp.message_handler(state = Condi.NewsChs)
async def echo_message(msg: types.Message):

    user_id = msg.from_user.id

    if msg.text == 'üìãHabrüìã':
        await Condi.Habr_Model_pars.set()
        await bot.send_message(msg.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É:', reply_markup = nav.backMain)
    elif msg.text == 'üìãLentaüìã':
        await Condi.Lenta_Model_pars.set()
        await bot.send_message(msg.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É:', reply_markup = nav.backMain)
    elif msg.text == 'üìãWikiüìã':
        await Condi.Wiki_pars.set()
        await bot.send_message(msg.from_user.id, '–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–º—É:', reply_markup = nav.backMain)
    elif msg.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(msg.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)

@dp.message_handler(state = Condi.Lenta_Model_pars)
async def echo_message(msg: types.Message):
    user_id = msg.from_user.id
    if msg.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(msg.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)
    else:
        prompt = msg.text
        await bot.send_message(msg.from_user.id,'–ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É, –æ–∂–∏–¥–∞–π—Ç–µ...')

        #–¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É    
        update_json(user_id, prompt, 'lenta')    
        
        start = time.time()
        model_res = lenta_parse(prompt, 1)   
        # print(len(model_res))
        print(f'time of lenta parsing: {time.time()-start}')

        if model_res == '–ù–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:':
            ans = model_res 
            
        else:
            # key_word = model_res[0]
            ans = []
            # ans = summery_gen(key_word) + '\n' + model_res[1]
            articles = model_res[0]
            links = model_res[1]
            start = time.time()
            for i in range(len(articles)):
                # ans.append(ner_recognition(summery_gen(articles[i])) + '\n' + links[i])
                # ans.append(summery_gen(articles[i]) + '\n' + links[i])
                sum_text = summery_gen(articles[i])
                language = 'ru'
                myobj = gTTS(text=sum_text, lang=language, slow=False)
                result = myobj.save(f'voicefile_{user_id}_{i}.ogg')
                ans.append(sum_text + '\n' + links[i])
        print(f'time of lenta summary: {time.time()-start}')
        await Condi.NewsChs.set()
        for i in range(len(ans)):
            await bot.send_message(msg.from_user.id, ans[i], parse_mode=types.ParseMode.HTML, reply_markup = nav.news2Menu)
            audio = open(f'voicefile_{user_id}_{i}.ogg', 'rb')
            await bot.send_audio(msg.from_user.id, audio)
            audio.close()

@dp.message_handler(state = Condi.Habr_Model_pars)
async def echo_message(msg: types.Message):
    user_id = msg.from_user.id
    
    if msg.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(msg.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)
    else:

        prompt = msg.text
        await bot.send_message(msg.from_user.id,'–ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É, –æ–∂–∏–¥–∞–π—Ç–µ...')
        #–¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É    
        update_json(user_id, prompt, 'habr')    

        model_res = parser(prompt, 1)
        # print(len(model_res))
        if model_res == '–ù–∞ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–æ–≤–æ—Å—Ç–∏. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:':
            ans = model_res 
            
        else:
            # key_word = model_res[0]
            ans = []
            # ans = summery_gen(key_word) + '\n' + model_res[1]
            articles = model_res[0]
            links = model_res[1]
            for i in range(len(articles)):
                # ans.append(ner_recognition(summery_gen(articles[i])) + '\n' + links[i])
                sum_text = summery_gen(articles[i])
                language = 'ru'
                myobj = gTTS(text=sum_text, lang=language, slow=False)
                result = myobj.save(f'voicefile_{user_id}_{i}.ogg')
                ans.append(sum_text + '\n' + links[i])

        await Condi.NewsChs.set()
        for i in range(len(ans)):
            await bot.send_message(msg.from_user.id, ans[i], parse_mode=types.ParseMode.HTML)
            audio = open(f'voicefile_{user_id}_{i}.ogg', 'rb')
            await bot.send_audio(msg.from_user.id, audio)
        await bot.send_message(msg.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup = nav.news2Menu)

@dp.message_handler(state = Condi.Wiki_pars)
async def echo_message(msg: types.Message):
    user_id = msg.from_user.id
    
    if msg.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(msg.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)
    else:

        prompt = msg.text
        
        await bot.send_message(msg.from_user.id,'–ò—â–µ–º —Å—Ç–∞—Ç—å—é –ø–æ –í–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É, –æ–∂–∏–¥–∞–π—Ç–µ...')
        #–¥–æ–±–∞–≤–ª—è–µ–º —é–∑–µ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å –≤ –±–∞–∑—É    
        # update_json(user_id, prompt, 'habr')   
        
        url = wikipedia.page(prompt, auto_suggest=False).url
        logging.info('–ò—â—É —Å—Ç–∞—Ç—å—é –≤ –≤–∏–∫–∏...')
        page = wikipedia.page(prompt, auto_suggest=False)
        wikitext=page.content[:600]
        wikimas=wikitext.split('.')
        wikimas = wikimas[:-1]
        wikitext2 = ''
        for x in wikimas:
            if not('==' in x):
                if(len((x.strip()))>3):
                    wikitext2=wikitext2+x+'.'
                else:
                    break
        wikitext2=re.sub('\([^()]*\)', '', wikitext2)
        wikitext2=re.sub('\([^()]*\)', '', wikitext2)
        wikitext2=re.sub('\{[^\{\}]*\}', '', wikitext2)
        mytext = wikitext2
        language = 'ru'
        myobj = gTTS(text=mytext, lang=language, slow=False)
        myobj.save(f"voicefile_wiki_{user_id}.ogg")
        ans = wikitext2 + '\n' + url 

        await Condi.NewsChs.set()
        
        await bot.send_message(msg.from_user.id, ans)
        audio = open(f"voicefile_wiki_{user_id}.ogg", 'rb')
        await bot.send_audio(msg.from_user.id, audio)
        await bot.send_message(msg.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é:', reply_markup = nav.news2Menu)

@dp.message_handler(state = Condi.Check_News_pars)
async def echo_message(msg: types.Message):
    user_id = msg.from_user.id
    if msg.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(msg.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)
    elif msg.text == '–ò—Å–∫–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∑–∞–ø—Ä–æ—Å–∞–º':
        
        prompt_habr = '' #habr topic
        prompt_lenta = '' # lenta topic

        print(f'checking news for user {user_id}...')

        #–ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ   
        
        with open(json_file_path, 'r') as fp:
            users_dict = json.load(fp)
        
        user_exists = False

        for user in users_dict:
            if user_id == user['id']:
                user_exists = True
                if user['habr_topic'] != []:
                    prompt_habr = user['habr_topic']
                    print(prompt_habr)

                if user['lenta_topic']!= []:
                    prompt_lenta = user['lenta_topic']
                    print(prompt_lenta)

                break

        if not(user_exists):
            ans = '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –±–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –í–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –≤ –º–µ–Ω—é "–í—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –Ω–æ–≤–æ—Å—Ç–∏".'
            await bot.send_message(msg.from_user.id, ans, reply_markup = nav.backMain)
        else:

            await bot.send_message(msg.from_user.id, f"–ò—â–µ–º –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –í–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–∞–º: {', '.join(prompt_habr)}, {', '.join(prompt_lenta)}. –ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
            ans =[]
            for p in prompt_habr:
                model_res = parser(p, 1)
    
                articles = model_res[0]
                links = model_res[1]
                for i in range(len(articles)):
                    ans.append(summery_gen(articles[i]) + '\n' + links[i])
            for p in prompt_lenta:
                model_res = lenta_parse(p, 1)
    
                articles = model_res[0]
                links = model_res[1]
                for i in range(len(articles)):
                    ans.append(summery_gen(articles[i]) + '\n' + links[i])


            for i in range(len(ans)):
                await bot.send_message(msg.from_user.id, ans[i], reply_markup = nav.backMain)

@dp.message_handler()
async def check_news():

    prompt = '' #habr topic
    prompt_lenta = '' # lenta topic

    
    #–ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç —é–∑–µ—Ä–∞ –≤ –±–∞–∑–µ   
    
    with open(json_file_path, 'r') as fp:
        users_dict = json.load(fp)
    
    # user_exists = False

    for user in users_dict:
        user_id = user['id']
        prompt = '' #habr topic
        prompt_lenta = '' # lenta topic
            
        if user['habr_topic'] != []:
            prompt = user['habr_topic']
            print(prompt)

        if user['lenta_topic']!= []:
            prompt_lenta = user['lenta_topic']
            print(prompt_lenta)

        ans =[]
        for p in prompt:
            model_res = parser(p, 1)

            articles = model_res[0]
            links = model_res[1]
            for i in range(len(articles)):
                ans.append(summery_gen(articles[i]) + '\n' + links[i])
        for p in prompt_lenta:
            model_res = lenta_parse(p, 1)

            articles = model_res[0]
            links = model_res[1]
            for i in range(len(articles)):
                ans.append(summery_gen(articles[i]) + '\n' + links[i])


        for i in range(len(ans)):
            await bot.send_message(user_id, ans[i])

@dp.message_handler(state = Condi.Money)
async def get_photo(message: types.Message):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)
    else:
        user_id = message.from_user.id
        
    with open(json_money_path, 'r') as fp:
        dict_money = json.load(fp)
    
    user_exists = False

    for user in dict_money:
        if user_id == user['id']:
            user_exists = True
            user['count_of_people'] = message.text
            user['list_of_names'] = []
            user['list_of_prices'] = []
            break

    if not(user_exists):
        
            dict_money.append({
                                "id": user_id,
                                "count_of_people": message.text,
                                "list_of_names": [],
                                "list_of_prices" : []
                                })
     
     # Verify updated list
    print(dict_money)        
    with open(json_money_path, 'w') as json_file:
        json.dump(dict_money, json_file, ensure_ascii=False,
                            indent=4,  
                            separators=(',',': '))
    print('Successfully appended to the JSON file')
    await Condi.Money_count_people.set()
    await bot.send_message(user_id, '–í–≤–µ–¥–∏—Ç–µ –∏–º–µ–Ω–∞ –≤—Å–µ—Ö –ø—Ä–∏—Å—É—Ç—Å–≤—É—é—â–∏—Ö!\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º - 1: ', reply_markup = nav.backMain)

@dp.message_handler(state = Condi.Money_count_people)
async def get_text(message: types.Message):
    user_id = message.from_user.id
    with open(json_money_path, 'r') as fp:
            dict_money = json.load(fp)       
 
    for user in dict_money:
        if user_id == user['id']:
            
            count_of_people = user['count_of_people'] 
            list_of_names = user['list_of_names'] 
            list_of_prices = user['list_of_prices']    
            break

    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)

    elif len(list_of_names) < int(count_of_people):
        list_of_names.append(message.text)
        print(list_of_names)
        for user in dict_money:
                if user_id == user['id']:
                    user['list_of_names'] = list_of_names 
                    break
        with open(json_money_path, 'w') as json_file:
            json.dump(dict_money, json_file, ensure_ascii=False,
                                indent=4,  
                                separators=(',',': '))        
        if len(list_of_names) != int(count_of_people):
            await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∏–º—è —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ–¥ –Ω–æ–º–µ—Ä–æ–º - {len(list_of_names) + 1}:', reply_markup = nav.backMain)
        else:
            for user in dict_money:
                    if user_id == user['id']:
                        user['list_of_names'] = list_of_names 
                        break
            with open(json_money_path, 'w') as json_file:
                json.dump(dict_money, json_file, ensure_ascii=False,
                                    indent=4,  
                                    separators=(',',': '))
            await Condi.Money_result.set()
            # list_of_prices = []
            await bot.send_message(message.from_user.id, f'–ö–∞–∫—É—é —Å—É–º–º—É –ø–æ—Ç—Ä–∞—Ç–∏–ª {list_of_names[0]}? (–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ–≥–æ —á–µ–∫–∞)', reply_markup = nav.ChekMenu)

@dp.message_handler(state = Condi.Money_result, content_types=['document', 'photo','text'])
async def get_text(message: types.Message):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)
    elif message.text == '‚úèÔ∏è–ó–∞–≥—Ä—É–∑–∫–∞ —á–µ–∫–∞‚úèÔ∏è':
            await Condi.Chekinput.set()
            await bot.send_message(message.from_user.id,'–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —á–µ–∫:', reply_markup = nav.backMain)                    
    elif message.text == '‚úèÔ∏è–í–≤–æ–¥ —Å—É–º–º—ã –≤—Ä—É—á–Ω—É—é‚úèÔ∏è':
            await Condi.ManulChek.set()
            await bot.send_message(message.from_user.id,'–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:', reply_markup = nav.backMain)  


@dp.message_handler(state = Condi.ManulChek, content_types=['document', 'photo','text'])
async def get_text(message: types.Message):
    user_id = message.from_user.id
    with open(json_money_path, 'r') as fp:
            dict_money = json.load(fp)
        
    for user in dict_money:
        if user_id == user['id']:
            user_exists = True
            count_of_people = user['count_of_people'] 
            list_of_names = user['list_of_names'] 
            list_of_prices = user['list_of_prices']    
            break

    list_of_prices.append(message.text)
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)    
    elif len(list_of_prices) != int(count_of_people):
        for user in dict_money:
                if user_id == user['id']:
                    user['list_of_prices'] = list_of_prices 
                    break
        with open(json_money_path, 'w') as json_file:
            json.dump(dict_money, json_file, ensure_ascii=False,
                                indent=4,  
                                separators=(',',': '))
        await Condi.Money_result.set()
        await message.answer(f'–ö–∞–∫—É—é —Å—É–º–º—É –ø–æ—Ç—Ä–∞—Ç–∏–ª {list_of_names[len(list_of_prices)]}?', reply_markup = nav.ChekMenu)
    else:
        await Condi.Init.set()
        ans = money_result(list_of_names, list_of_prices)
        await bot.send_message(message.from_user.id, ans, reply_markup = nav.mainMen)       


@dp.message_handler(state = Condi.Chekinput, content_types=['document', 'photo','text'])
async def get_photo(message: types.Message):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
        await Condi.Init.set()
        await bot.send_message(message.from_user.id,'–ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é', reply_markup = nav.mainMenu)
    user_id = message.from_user.id
    img_path = 'input.jpg'
    await message.photo[-1].download(img_path)
    pred_mount = check_detect(img_path)

    with open(json_money_path, 'r') as fp:
            dict_money = json.load(fp)
        
    for user in dict_money:
        if user_id == user['id']:
            count_of_people = user['count_of_people'] 
            list_of_names = user['list_of_names'] 
            list_of_prices = user['list_of_prices']    
            break

    list_of_prices.append(pred_mount)
    if len(list_of_prices) != int(count_of_people):
        for user in dict_money:
                if user_id == user['id']:
                    user['list_of_prices'] = list_of_prices 
                    break
        with open(json_money_path, 'w') as json_file:
            json.dump(dict_money, json_file, ensure_ascii=False,
                                indent=4,  
                                separators=(',',': '))
        await Condi.Money_result.set()
        await bot.send_message(message.from_user.id, f'–°—á–∏—Ç–∞–ª –°—É–º–º—É - {pred_mount}')
        await bot.send_message(message.from_user.id, f'–ö–∞–∫—É—é —Å—É–º–º—É –ø–æ—Ç—Ä–∞—Ç–∏–ª {list_of_names[len(list_of_prices)]}? (–º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –µ–≥–æ —á–µ–∫–∞)', reply_markup = nav.ChekMenu)
    else:
        await bot.send_message(message.from_user.id, f'–°—á–∏—Ç–∞–ª –°—É–º–º—É - {pred_mount}')
        ans = money_result(list_of_names, list_of_prices)
        await Condi.Init.set()
        await bot.send_message(message.from_user.id, ans, reply_markup = nav.mainMenu)  

def update_json(user_id, prompt, source):

    with open(json_file_path, 'r') as fp:
        users_dict = json.load(fp)
    
    user_exists = False

    for user in users_dict:
        if user_id == user['id']:
            user_exists = True
            if (source=='habr'):
                if prompt not in user['habr_topic']:
                    user['habr_topic'].append(prompt)
            if (source =='lenta'):
                if prompt not in user['lenta_topic']:
                    user['lenta_topic'].append(prompt)
            break

    if not(user_exists):
        topic = []
        topic.append(prompt)
        if (source=='habr'):
            users_dict.append({
                                "id": user_id,
                                "habr_topic": topic,
                                "lenta_topic": []
                                })
        if (source=='lenta'):
            users_dict.append({
                                "id": user_id,
                                "habr_topic": [],
                                "lenta_topic": topic
                                }) 
 
    # Verify updated list
    print(users_dict)        
    with open(json_file_path, 'w') as json_file:
        json.dump(users_dict, json_file, ensure_ascii=False,
                            indent=4,  
                            separators=(',',': '))
    print('Successfully appended to the JSON file')

# def schedule_jobs():
#     scheduler.add_job(check_news, 'cron', hour = 11, minute=3)
#     # scheduler.add_job(img_loader, 'cron', hour = 18)

async def scheduler():
    aioschedule.every().day.at("09:20").do(check_news)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(dp): 
    asyncio.create_task(scheduler())
 
# async def on_startup(dp):
#     schedule_jobs()

if __name__ == '__main__':
    # scheduler.start()
    # executor.start_polling(dp)
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)